using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ContentServer.Core.Conversion
{
    public static class ConversionPipelineValidation
    {
        class StepValidation
        {

        }

        public static bool Validate(
            this ConversionPipeline pipeline,
            IReadOnlyDictionary<string, string> inputsWithFormat,
            IReadOnlyCollection<ConversionAction> actions,
            out string? description)
        {
            description = null;
            Dictionary<string, string> inputs = new Dictionary<string, string>(inputsWithFormat);
            foreach (var item in pipeline.Steps.OrderBy(p => p.Key).Select(p => p.Value))
            {
                ConversionDefinition conversion = item.Conversion;

                ConversionAction? action = actions.SingleOrDefault(a => string.Equals(a.Name, conversion.Name));

                if (action == null)
                {
                    description = $"Conversion {conversion.Name}. Not registered";
                    return false;
                }

                if (item.Input.Count < action.MinInputCount || item.Input.Count > action.MaxInputCount)
                {
                    description = $"Conversion {action.Name}. Expected {action.MinInputCount} - {action.MaxInputCount} input files. {item.Input.Count} was provided";
                    return false;
                }

                foreach (var inp in item.Input)
                {
                    if (inputs.ContainsKey(inp))
                    {
                        if (!action.InputFormats.Contains(inputs[inp]))
                        {
                            description = $"Conversion {conversion.Name}. Input file with alias {inp}. Format {inputs[inp]} not supported.";
                            return false;
                        }

                        foreach (var v in conversion.Values)
                        {
                            ParamDefinition? pd = action.SupportedParams.SingleOrDefault(p => string.Equals(p.Name, v.Key));

                            if (pd == null)
                            {
                                description = $"Conversion {conversion.Name}. Parameter with name {v.Key}. Not supported.";
                                return false;
                            }

                            if (!pd.ValueValidation.IsMatch(v.Value))
                            {
                                description = $"Conversion {conversion.Name}. Parameter with name {v.Key}. Value {v.Value} not match {pd.ValueValidation} pattern.";
                                return false;
                            }
                        }

                        //string output = item.Output()
                    }
                    else
                    {
                        description = $"Conversion {action.Name}. Input file with alias {inp}. Not provided and not generated by previous steps.";
                        return false;
                    }
                }
            }

            return true;
        }
    }
}
